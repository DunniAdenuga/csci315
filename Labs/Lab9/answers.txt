1.1 What type(s) of fragmentation is (are) possible with a custom memory allocator like yours? Internal, external or yet something different?

Internal fragmentation

1.2 Propose two or more performance metrics (unrelated to fragmentation) that you could use to assess how well your memory allocator works and describe how you could measure each one.

->Statistical Analytical tools like:
Mean
Standard-Deviation
->Time it takes for allocator to run and allocate the memory: timer, get time process asks for memory and time memory gets memory and get the difference.

1.3 Have global variable(frag) to represent size of fragments
    Have global variable(counter) to represent number of times allocate is accessed.
    average frag = frag/counter;

2.1 
This pseudocode is quite sufficient. As we go through loop,
update r as you move through loop
No need to have "algorithm" in allocate, I have it in allocator_init.
srandom(seed); // initialize PRNG
 
int r=0;
 
void *p = NULL;
 
while (r < requests) {
 
  s = a random number between 100 and 1000;
 
  p = allocate(size)
  // this will require you to change your allocate function
  // so that it accepts the algorithm parameter to select an
  // allocation policy
  r++;
  deallocate(p);
}

Using Student-Idf:
Critical Level = 1.688298
Confidence Level = 95%
no of samples = 37

BestFit has Average Fragmentation of : 5157.39 with interval 4663.13-5651.65
WorstFit has Average Fragmentation of : 8565.5946 with interval 8461.91 - 8669.28
FirstFit has Average Fragmentation of : 8565.5946 with interval 8463.34 - 8667.84

The best policy depends on the amount of fragmentation one desires. In this experiment, first-fit and worst-fit had the highest number of fragmentation. 
Best-Fit gave a lower fragmentation.
Best-Fit would be the best policy sice internal fragmentation is minimal.

Pre-Lab 11
2.1
PAYLOAD HEXDUMP:

     0000000: 2063 6f75 6e74 6572 2066 6f72 2074 6865    counter for the
     0000010: 206e 756d 6265 7220 6f66 2062 7974 6573    number of bytes
     0000020: 2028 6861 6c66 2074 6865 206e 756d 6265    (half the numbe
     0000030: 7220 6f66 2068 6578 2064 6967 6974 7329   r of hex digits)
     0000040: 0a     
Has hexadecimals and a part that is human readable.
2.2
PAYLOAD HEXDUMP:



2.3
2.1 is for a text file, has human readable components  while 2.2 is for an executable file in binary.

2.4

- /usr/bin/file:- Executable file, available for GNU/Linux 2.6.18, it uses shared libaries
- ~cs315/Labs/Lab11/work:-located in home/accounts/COURSES/cs315/Labs/Lab11/work: It's a PDF document, version 1.3
- ~cs315/Labs/Lab11/beauty:- Located in home/accounts/COURSES/cs315/Labs/Lab11/beauty: It's a JPEG image data, JFIF standard 1.01, comment: "CREATOR: gd-jpeg v1.0 (using IJ"
- Your separately compiled hexdump.o:- It's an executable file
hexdump.o: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), not stripped

- hexdump.h - text file in ASCII characters
hexdump.h: ASCII C program text
Linux Manual:
file(1)
     file tests each argument in an attempt to classify it.  There are three
     sets of tests, performed in this order: filesystem tests, magic tests,
     and language tests.  The first test that succeeds causes the file type to
     be printed.

     The type printed will usually contain one of the words text (the file
     contains only printing characters and a few common control characters and
     is probably safe to read on an ASCII terminal), executable (the file con-
     tains the result of compiling a program in a form understandable to some
     UNIX kernel or another), or data meaning anything else (data is usually
     ‘binary’ or non-printable).  Exceptions are well-known file formats (core
     files, tar archives) that are known to contain binary data.  When modify-
     ing magic files or the program itself, make sure to preserve these
     keywords.  Users depend on knowing that all the readable files in a
     directory have the word ‘text’ printed.
     The filesystem tests are based on examining the return from a stat(2)
     system call.  The program checks to see if the file is empty, or if it’s
     some sort of special file.  Any known file types appropriate to the sys-
     tem you are running on (sockets, symbolic links, or named pipes (FIFOs)
     on those systems that implement them) are intuited if they are defined in
     the system header file

     The magic tests are used to check for files with data in particular fixed
     formats.  The canonical example of this is a binary executable (compiled
     program) a.out file, whose format is defined in #include <a.out.h>
     and possibly #include <exec.h>
     in the standard include directory.  These files have a ‘magic number’
     stored in a particular place near the beginning of the file that tells
     the UNIX operating system that the file is a binary executable, and which
     of several types thereof.  The concept of a ‘magic’ has been applied by
     extension to data files.  Any file with some invariant identifier at a
     small fixed offset into the file can usually be described in this way.
     The information identifying these files is read from the compiled magic
     file /usr/share/misc/magic.mgc, or the files in the directory
     /usr/share/misc/magic if the compiled file does not exist. In addition,
     if $HOME/.magic.mgc or $HOME/.magic exists, it will be used in preference
     to the system magic files.  If /etc/magic exists, it will be used
     together with other magic files.

     If a file does not match any of the entries in the magic file, it is
     examined to see if it seems to be a text file.  ASCII, ISO-8859-x, non-
     ISO 8-bit extended-ASCII character sets (such as those used on Macintosh
     and IBM PC systems), UTF-8-encoded Unicode, UTF-16-encoded Unicode, and
     EBCDIC character sets can be distinguished by the different ranges and
     sequences of bytes that constitute printable text in each set.  If a file
     passes any of these tests, its character set is reported.  ASCII,
     ISO-8859-x, UTF-8, and extended-ASCII files are identified as ‘text’
     because they will be mostly readable on nearly any terminal; UTF-16 and
     EBCDIC are only ‘character data’ because, while they contain text, it is
     text that will require translation before it can be read.  In addition,
     file will attempt to determine other characteristics of text-type files.
     If the lines of a file are terminated by CR, CRLF, or NEL, instead of the
     Unix-standard LF, this will be reported.  Files that contain embedded
     escape sequences or overstriking will also be identified.

     Once file has determined the character set used in a text-type file, it
     will attempt to determine in what language the file is written.  The lan-
     guage tests look for particular strings (cf.  #include <names.h>
     ) that can appear anywhere in the first few blocks of a file.  For exam-
     ple, the keyword .br indicates that the file is most likely a troff(1)
     input file, just as the keyword struct indicates a C program.  These
     tests are less reliable than the previous two groups, so they are per-
     formed last.  The language test routines also test for some miscellany
     (such as tar(1) archives).

     Any file that cannot be identified as having been written in any of the
     character sets listed above is simply said to be ‘data’.
